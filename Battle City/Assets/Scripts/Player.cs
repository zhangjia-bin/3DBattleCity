// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace PlayerIn {

  #region Enums
  public enum playerstate {
    Up = 0,
    Down = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///对象的集合
  /// </summary>
  public sealed class Allplyaers : pb::IMessage {
    private static readonly pb::MessageParser<Allplyaers> _parser = new pb::MessageParser<Allplyaers>(() => new Allplyaers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Allplyaers> Parser { get { return _parser; } }

    /// <summary>Field number for the "useralls" field.</summary>
    public const int UserallsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlayerIn.player> _repeated_useralls_codec
        = pb::FieldCodec.ForMessage(10, global::PlayerIn.player.Parser);
    private readonly pbc::RepeatedField<global::PlayerIn.player> useralls_ = new pbc::RepeatedField<global::PlayerIn.player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlayerIn.player> Useralls {
      get { return useralls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      useralls_.WriteTo(output, _repeated_useralls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += useralls_.CalculateSize(_repeated_useralls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            useralls_.AddEntriesFrom(input, _repeated_useralls_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个对象
  /// </summary>
  public sealed class player : pb::IMessage {
    private static readonly pb::MessageParser<player> _parser = new pb::MessageParser<player>(() => new player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<player> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::PlayerIn.playerstate state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayerIn.playerstate State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "playername" field.</summary>
    public const int PlayernameFieldNumber = 3;
    private string playername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Playername {
      get { return playername_; }
      set {
        playername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 4;
    private float px_;
    /// <summary>
    ///人物的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 5;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 6;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 7;
    private float rx_;
    /// <summary>
    ///旋转的角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 8;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 9;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    /// <summary>Field number for the "tx" field.</summary>
    public const int TxFieldNumber = 10;
    private float tx_;
    /// <summary>
    ///炮头的旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Tx {
      get { return tx_; }
      set {
        tx_ = value;
      }
    }

    /// <summary>Field number for the "ty" field.</summary>
    public const int TyFieldNumber = 11;
    private float ty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ty {
      get { return ty_; }
      set {
        ty_ = value;
      }
    }

    /// <summary>Field number for the "tz" field.</summary>
    public const int TzFieldNumber = 12;
    private float tz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Tz {
      get { return tz_; }
      set {
        tz_ = value;
      }
    }

    /// <summary>Field number for the "boold" field.</summary>
    public const int BooldFieldNumber = 13;
    private float boold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Boold {
      get { return boold_; }
      set {
        boold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Playername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Playername);
      }
      if (Px != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Rz);
      }
      if (Tx != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Tx);
      }
      if (Ty != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Ty);
      }
      if (Tz != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Tz);
      }
      if (Boold != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Boold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Playername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Playername);
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      if (Tx != 0F) {
        size += 1 + 4;
      }
      if (Ty != 0F) {
        size += 1 + 4;
      }
      if (Tz != 0F) {
        size += 1 + 4;
      }
      if (Boold != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::PlayerIn.playerstate) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Playername = input.ReadString();
            break;
          }
          case 37: {
            Px = input.ReadFloat();
            break;
          }
          case 45: {
            Py = input.ReadFloat();
            break;
          }
          case 53: {
            Pz = input.ReadFloat();
            break;
          }
          case 61: {
            Rx = input.ReadFloat();
            break;
          }
          case 69: {
            Ry = input.ReadFloat();
            break;
          }
          case 77: {
            Rz = input.ReadFloat();
            break;
          }
          case 85: {
            Tx = input.ReadFloat();
            break;
          }
          case 93: {
            Ty = input.ReadFloat();
            break;
          }
          case 101: {
            Tz = input.ReadFloat();
            break;
          }
          case 109: {
            Boold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class KillRen : pb::IMessage {
    private static readonly pb::MessageParser<KillRen> _parser = new pb::MessageParser<KillRen>(() => new KillRen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KillRen> Parser { get { return _parser; } }

    /// <summary>Field number for the "wj" field.</summary>
    public const int WjFieldNumber = 1;
    private string wj_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wj {
      get { return wj_; }
      set {
        wj_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dr" field.</summary>
    public const int DrFieldNumber = 2;
    private string dr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dr {
      get { return dr_; }
      set {
        dr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "bloor" field.</summary>
    public const int BloorFieldNumber = 4;
    private int bloor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bloor {
      get { return bloor_; }
      set {
        bloor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Wj.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Wj);
      }
      if (Dr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dr);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (Bloor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Bloor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wj.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wj);
      }
      if (Dr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dr);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Bloor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bloor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Wj = input.ReadString();
            break;
          }
          case 18: {
            Dr = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            Bloor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
